{"ast":null,"code":"var _jsxFileName = \"/home/cytech/web6/frontend/src/components/ThermostatControls.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ThermostatControls({\n  device\n}) {\n  _s();\n  var _device$currentTemp;\n  const [currentTemp, setCurrentTemp] = useState((_device$currentTemp = device === null || device === void 0 ? void 0 : device.currentTemp) !== null && _device$currentTemp !== void 0 ? _device$currentTemp : 20);\n  const [temperatureStarted, setTemperatureStarted] = useState(false);\n  const [heatingOn, setHeatingOn] = useState(false); // État pour activer/désactiver le chauffage\n\n  useEffect(() => {\n    // Lorsque le composant est monté, démarre le comptage de la température après 1 seconde\n    const timeout = setTimeout(() => {\n      setTemperatureStarted(true);\n    }, 1000);\n\n    // Intervalle pour mettre à jour la température actuelle en fonction de la cible\n    const interval = setInterval(() => {\n      if (temperatureStarted && typeof device.targetTemp === 'number') {\n        setCurrentTemp(prev => {\n          const diff = device.targetTemp - prev;\n          const step = diff > 0 ? 0.2 : diff < 0 ? -0.1 : 0;\n          return parseFloat((prev + step).toFixed(1)); // Mise à jour de la température actuelle\n        });\n      }\n    }, 1000);\n\n    // Nettoyage à la désactivation du composant\n    return () => {\n      clearInterval(interval);\n      clearTimeout(timeout);\n    };\n  }, [device.targetTemp, temperatureStarted]); // Se réexécute uniquement si targetTemp ou temperatureStarted change\n\n  // Fonction pour ajuster la température cible\n  const handleTempChange = e => {\n    device.targetTemp = parseFloat(e.target.value); // Modifier la température cible de l'appareil\n  };\n\n  // Fonction pour allumer/éteindre le chauffage\n  const toggleHeating = () => {\n    setHeatingOn(prevState => !prevState);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"thermostat-controls\",\n    children: [heatingOn && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"temperature-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"tempRange\",\n        children: \"R\\xE9glage de la temp\\xE9rature\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"tempRange\",\n        type: \"range\",\n        min: \"10\",\n        max: \"30\",\n        step: \"0.5\",\n        value: device.targetTemp,\n        onChange: handleTempChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [device.targetTemp, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"current-temp\",\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"Temp\\xE9rature actuelle : \", currentTemp, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"switch\",\n      onClick: toggleHeating,\n      style: {\n        marginBottom: '10px'\n      },\n      children: heatingOn ? 'Éteindre chauffage' : 'Allumer chauffage'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(ThermostatControls, \"Tj0cREdRzrPVFL0l9s8ck4jLERA=\");\n_c = ThermostatControls;\nexport default ThermostatControls;\nvar _c;\n$RefreshReg$(_c, \"ThermostatControls\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ThermostatControls","device","_s","_device$currentTemp","currentTemp","setCurrentTemp","temperatureStarted","setTemperatureStarted","heatingOn","setHeatingOn","timeout","setTimeout","interval","setInterval","targetTemp","prev","diff","step","parseFloat","toFixed","clearInterval","clearTimeout","handleTempChange","e","target","value","toggleHeating","prevState","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","type","min","max","onChange","onClick","style","marginBottom","_c","$RefreshReg$"],"sources":["/home/cytech/web6/frontend/src/components/ThermostatControls.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction ThermostatControls({ device }) {\n  const [currentTemp, setCurrentTemp] = useState(device?.currentTemp ?? 20);\n  const [temperatureStarted, setTemperatureStarted] = useState(false);\n  const [heatingOn, setHeatingOn] = useState(false); // État pour activer/désactiver le chauffage\n\n  useEffect(() => {\n    // Lorsque le composant est monté, démarre le comptage de la température après 1 seconde\n    const timeout = setTimeout(() => {\n      setTemperatureStarted(true);\n    }, 1000);\n\n    // Intervalle pour mettre à jour la température actuelle en fonction de la cible\n    const interval = setInterval(() => {\n      if (temperatureStarted && typeof device.targetTemp === 'number') {\n        setCurrentTemp(prev => {\n          const diff = device.targetTemp - prev;\n          const step = diff > 0 ? 0.2 : (diff < 0 ? -0.1 : 0);\n          return parseFloat((prev + step).toFixed(1)); // Mise à jour de la température actuelle\n        });\n      }\n    }, 1000);\n\n    // Nettoyage à la désactivation du composant\n    return () => {\n      clearInterval(interval);\n      clearTimeout(timeout);\n    };\n  }, [device.targetTemp, temperatureStarted]); // Se réexécute uniquement si targetTemp ou temperatureStarted change\n\n  // Fonction pour ajuster la température cible\n  const handleTempChange = (e) => {\n    device.targetTemp = parseFloat(e.target.value); // Modifier la température cible de l'appareil\n  };\n\n  // Fonction pour allumer/éteindre le chauffage\n  const toggleHeating = () => {\n    setHeatingOn(prevState => !prevState);\n  };\n\n  return (\n    <div className=\"thermostat-controls\">\n\n      {/* Affichage de la molette de réglage de température seulement si le chauffage est allumé */}\n      {heatingOn && (\n        <div className=\"temperature-control\">\n          <label htmlFor=\"tempRange\">Réglage de la température</label>\n          <input\n            id=\"tempRange\"\n            type=\"range\"\n            min=\"10\"\n            max=\"30\"\n            step=\"0.5\"\n            value={device.targetTemp}\n            onChange={handleTempChange}\n          />\n          <span>{device.targetTemp}°C</span>\n        </div>\n      )}\n\n      {/* Affichage de la température actuelle */}\n      <div className=\"current-temp\">\n        <h3>Température actuelle : {currentTemp}°C</h3>\n      </div>\n\n      {/* Bouton pour allumer/éteindre le chauffage */}\n      <button \n        className=\"switch\"\n        onClick={toggleHeating}\n        style={{ marginBottom: '10px' }}\n      >\n        {heatingOn ? 'Éteindre chauffage' : 'Allumer chauffage'}\n      </button>\n    </div>\n  );\n}\n\nexport default ThermostatControls;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}