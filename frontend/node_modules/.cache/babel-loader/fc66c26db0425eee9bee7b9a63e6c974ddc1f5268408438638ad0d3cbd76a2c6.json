{"ast":null,"code":"var _jsxFileName = \"/home/cytech/web6/frontend/src/components/ThermostatControls.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ThermostatControls({\n  device\n}) {\n  _s();\n  var _device$currentTemp, _device$battery;\n  const [currentTemp, setCurrentTemp] = useState((_device$currentTemp = device === null || device === void 0 ? void 0 : device.currentTemp) !== null && _device$currentTemp !== void 0 ? _device$currentTemp : 20);\n  const [battery, setBattery] = useState((_device$battery = device === null || device === void 0 ? void 0 : device.battery) !== null && _device$battery !== void 0 ? _device$battery : 100);\n  //const [mode, setMode] = useState(device?.mode ?? 'batterie');\n  const [temperatureStarted, setTemperatureStarted] = useState(false);\n  const [heatingOn, setHeatingOn] = useState(false); // État pour activer/désactiver le chauffage\n\n  // Mise à jour de la batterie selon le mode\n  const updateBattery = (mode, battery) => {\n    if (mode === 'batterie') {\n      return battery > 0 ? battery - 0.1 : 0;\n    } else if (mode === 'branché') {\n      return battery < 100 ? battery + 0.1 : 100;\n    }\n    return battery;\n  };\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setTemperatureStarted(true);\n    }, 5000);\n    const interval = setInterval(() => {\n      if (temperatureStarted && typeof device.targetTemp === 'number') {\n        setCurrentTemp(prev => {\n          const diff = device.targetTemp - prev;\n          const step = diff > 0 ? 0.2 : diff < 0 ? -0.1 : 0;\n          return parseFloat((prev + step).toFixed(1));\n        });\n      }\n      setBattery(prev => {\n        const newBattery = updateBattery(mode, prev);\n        localStorage.setItem(`battery-${device.name}`, newBattery.toFixed(1));\n        return parseFloat(newBattery.toFixed(1));\n      });\n    }, 1000);\n    return () => {\n      clearInterval(interval);\n      clearTimeout(timeout);\n    };\n  }, [mode, device === null || device === void 0 ? void 0 : device.targetTemp, temperatureStarted, device === null || device === void 0 ? void 0 : device.name]);\n\n  // Fonction pour ajuster la température\n  const handleTempChange = e => {\n    device.targetTemp = parseFloat(e.target.value);\n  };\n\n  // Toggle entre \"branché\" et \"chargé\"\n  const toggleMode = () => {\n    const newMode = mode === 'branché' ? 'chargé' : 'branché';\n    setMode(newMode);\n    device.mode = newMode; // Mettre à jour la variable mode dans le device\n  };\n\n  // Fonction pour allumer/éteindre le chauffage\n  const toggleHeating = () => {\n    setHeatingOn(prevState => !prevState);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"thermostat-controls\",\n    children: [heatingOn && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"temperature-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"tempRange\",\n        children: \"R\\xE9glage de la temp\\xE9rature\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"tempRange\",\n        type: \"range\",\n        min: \"10\",\n        max: \"30\",\n        step: \"0.5\",\n        value: device.targetTemp,\n        onChange: handleTempChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [device.targetTemp, \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"switch\",\n      onClick: toggleHeating,\n      style: {\n        marginBottom: '10px'\n      },\n      children: heatingOn ? 'Éteindre chauffage' : 'Allumer chauffage'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 5\n  }, this);\n}\n_s(ThermostatControls, \"9V3Is3blu4DcFHClDxzFVqkEI3A=\");\n_c = ThermostatControls;\nexport default ThermostatControls;\nvar _c;\n$RefreshReg$(_c, \"ThermostatControls\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","ThermostatControls","device","_s","_device$currentTemp","_device$battery","currentTemp","setCurrentTemp","battery","setBattery","temperatureStarted","setTemperatureStarted","heatingOn","setHeatingOn","updateBattery","mode","timeout","setTimeout","interval","setInterval","targetTemp","prev","diff","step","parseFloat","toFixed","newBattery","localStorage","setItem","name","clearInterval","clearTimeout","handleTempChange","e","target","value","toggleMode","newMode","setMode","toggleHeating","prevState","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","id","type","min","max","onChange","onClick","style","marginBottom","_c","$RefreshReg$"],"sources":["/home/cytech/web6/frontend/src/components/ThermostatControls.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nfunction ThermostatControls({ device }) {\n  const [currentTemp, setCurrentTemp] = useState(device?.currentTemp ?? 20);\n  const [battery, setBattery] = useState(device?.battery ?? 100);\n  //const [mode, setMode] = useState(device?.mode ?? 'batterie');\n  const [temperatureStarted, setTemperatureStarted] = useState(false);\n  const [heatingOn, setHeatingOn] = useState(false); // État pour activer/désactiver le chauffage\n\n  // Mise à jour de la batterie selon le mode\n  const updateBattery = (mode, battery) => {\n    if (mode === 'batterie') {\n      return battery > 0 ? battery - 0.1 : 0;\n    } else if (mode === 'branché') {\n      return battery < 100 ? battery + 0.1 : 100;\n    }\n    return battery;\n  };\n\n  useEffect(() => {\n    const timeout = setTimeout(() => {\n      setTemperatureStarted(true);\n    }, 5000);\n\n    const interval = setInterval(() => {\n      if (temperatureStarted && typeof device.targetTemp === 'number') {\n        setCurrentTemp(prev => {\n          const diff = device.targetTemp - prev;\n          const step = diff > 0 ? 0.2 : (diff < 0 ? -0.1 : 0);\n          return parseFloat((prev + step).toFixed(1));\n        });\n      }\n\n      setBattery(prev => {\n        const newBattery = updateBattery(mode, prev);\n        localStorage.setItem(`battery-${device.name}`, newBattery.toFixed(1));\n        return parseFloat(newBattery.toFixed(1));\n      });\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n      clearTimeout(timeout);\n    };\n  }, [mode, device?.targetTemp, temperatureStarted, device?.name]);\n\n  // Fonction pour ajuster la température\n  const handleTempChange = (e) => {\n    device.targetTemp = parseFloat(e.target.value);\n  };\n\n  // Toggle entre \"branché\" et \"chargé\"\n  const toggleMode = () => {\n    const newMode = mode === 'branché' ? 'chargé' : 'branché';\n    setMode(newMode);\n    device.mode = newMode; // Mettre à jour la variable mode dans le device\n  };\n\n  // Fonction pour allumer/éteindre le chauffage\n  const toggleHeating = () => {\n    setHeatingOn(prevState => !prevState);\n  };\n\n  return (\n    <div className=\"thermostat-controls\">\n      {/* Bouton pour allumer/éteindre le chauffage */}\n      \n\n      {/* Affichage de la molette de réglage de température seulement si le chauffage est allumé */}\n      {heatingOn && (\n        <div className=\"temperature-control\">\n          <label htmlFor=\"tempRange\">Réglage de la température</label>\n          <input\n            id=\"tempRange\"\n            type=\"range\"\n            min=\"10\"\n            max=\"30\"\n            step=\"0.5\"\n            value={device.targetTemp}\n            onChange={handleTempChange}\n          />\n          <span>{device.targetTemp}°C</span>\n        </div>\n      )}\n      <button \n        className=\"switch\"\n        onClick={toggleHeating}\n        style={{ marginBottom: '10px' }}\n      >\n        {heatingOn ? 'Éteindre chauffage' : 'Allumer chauffage'}\n      </button>\n\n      {/* Affichage de l'état du mode d'alimentation (Branché / Chargé) */}\n      \n    </div>\n  );\n}\n\nexport default ThermostatControls;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}